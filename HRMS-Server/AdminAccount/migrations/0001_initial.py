# Generated by Django 4.2.1 on 2023-12-01 10:31

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('name', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('emplyeeIdentficationCode', models.CharField(default='', max_length=50)),
                ('joining_date', models.DateField(default='')),
                ('phone', models.CharField(default='', max_length=15)),
                ('isAdmin', models.BooleanField(default=False)),
                ('isOwner', models.BooleanField(default=False)),
                ('casual_leave_days', models.PositiveIntegerField(default=0)),
                ('salary', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('medical_leave_days', models.PositiveIntegerField(default=0)),
                ('lop_leave_days', models.PositiveIntegerField(null=True)),
                ('department', models.CharField(default='', max_length=255)),
                ('designation', models.CharField(default='', max_length=255)),
                ('profilePic', models.ImageField(null=True, upload_to='profilePic/')),
                ('isReportingManager', models.BooleanField(default=False)),
                ('basic_salary', models.FloatField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100)], null=True)),
                ('hra', models.FloatField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100)], null=True)),
                ('pf', models.FloatField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100)], null=True)),
                ('special_allowances', models.FloatField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100)], null=True)),
                ('can_add_employees', models.BooleanField(default=False, null=True)),
                ('can_remove_employees', models.BooleanField(default=False, null=True)),
                ('can_update_employees', models.BooleanField(default=False, null=True)),
                ('can_read_holidays', models.BooleanField(default=False, null=True)),
                ('can_write_holidays', models.BooleanField(default=False, null=True)),
                ('can_create_holidays', models.BooleanField(default=False, null=True)),
                ('can_delete_holidays', models.BooleanField(default=False, null=True)),
                ('can_import_holidays', models.BooleanField(default=False, null=True)),
                ('can_export_holidays', models.BooleanField(default=False, null=True)),
                ('can_acceptOrReject_leaves', models.BooleanField(default=False, null=True)),
                ('can_read_leaves', models.BooleanField(default=False, null=True)),
                ('can_write_leaves', models.BooleanField(default=False, null=True)),
                ('can_create_leaves', models.BooleanField(default=False, null=True)),
                ('can_delete_leaves', models.BooleanField(default=False, null=True)),
                ('can_import_leaves', models.BooleanField(default=False, null=True)),
                ('can_export_leaves', models.BooleanField(default=False, null=True)),
                ('can_read_clients', models.BooleanField(default=False, null=True)),
                ('can_write_clients', models.BooleanField(default=False, null=True)),
                ('can_create_clients', models.BooleanField(default=False, null=True)),
                ('can_delete_clients', models.BooleanField(default=False, null=True)),
                ('can_import_clients', models.BooleanField(default=False, null=True)),
                ('can_export_clients', models.BooleanField(default=False, null=True)),
                ('can_read_projects', models.BooleanField(default=False, null=True)),
                ('can_write_projects', models.BooleanField(default=False, null=True)),
                ('can_create_projects', models.BooleanField(default=False, null=True)),
                ('can_delete_projects', models.BooleanField(default=False, null=True)),
                ('can_import_projects', models.BooleanField(default=False, null=True)),
                ('can_export_projects', models.BooleanField(default=False, null=True)),
                ('can_read_tasks', models.BooleanField(default=False, null=True)),
                ('can_write_tasks', models.BooleanField(default=False, null=True)),
                ('can_create_tasks', models.BooleanField(default=False, null=True)),
                ('can_delete_tasks', models.BooleanField(default=False, null=True)),
                ('can_import_tasks', models.BooleanField(default=False, null=True)),
                ('can_export_tasks', models.BooleanField(default=False, null=True)),
                ('can_read_chats', models.BooleanField(default=False, null=True)),
                ('can_write_chats', models.BooleanField(default=False, null=True)),
                ('can_create_chats', models.BooleanField(default=False, null=True)),
                ('can_delete_chats', models.BooleanField(default=False, null=True)),
                ('can_import_chats', models.BooleanField(default=False, null=True)),
                ('can_export_chats', models.BooleanField(default=False, null=True)),
                ('can_read_assets', models.BooleanField(default=False, null=True)),
                ('can_create_assets', models.BooleanField(default=False, null=True)),
                ('can_write_assets', models.BooleanField(default=False, null=True)),
                ('can_delete_assets', models.BooleanField(default=False, null=True)),
                ('can_import_assets', models.BooleanField(default=False, null=True)),
                ('can_export_assets', models.BooleanField(default=False, null=True)),
                ('can_read_timing_sheets', models.BooleanField(default=False, null=True)),
                ('can_write_timing_sheets', models.BooleanField(default=False, null=True)),
                ('can_create_timing_sheets', models.BooleanField(default=False, null=True)),
                ('can_delete_timing_sheets', models.BooleanField(default=False, null=True)),
                ('can_import_timing_sheets', models.BooleanField(default=False, null=True)),
                ('can_export_timing_sheets', models.BooleanField(default=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('reporting_manager', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ReportingManagerAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporting_manager_of', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Leave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(choices=[('casual', 'Casual'), ('medical', 'Medical'), ('lop', 'Loss of Pay')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('noOfDays', models.IntegerField(null=True)),
                ('leavePrecessed', models.BooleanField(default=False)),
                ('processedBy', models.CharField(max_length=100)),
                ('leave_status', models.CharField(choices=[('new', 'New'), ('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='new', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('punch_times', models.JSONField(default=list)),
                ('first_punch_in', models.TimeField(null=True)),
                ('last_punchout', models.TimeField(null=True)),
                ('total_punch_time', models.DurationField(default=datetime.timedelta(0))),
                ('is_holiday', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payslip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveIntegerField()),
                ('year', models.PositiveIntegerField()),
                ('s3_url', models.URLField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'month', 'year')},
            },
        ),
    ]
